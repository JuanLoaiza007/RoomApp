package com.ihuntgore.roomapp.view

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.ihuntgore.roomapp.R
import com.ihuntgore.roomapp.databinding.ActivityMainBinding
import com.ihuntgore.roomapp.model.Person
import com.ihuntgore.roomapp.view.adapter.PersonAdapter
import com.ihuntgore.roomapp.viewmodel.PersonApp
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var personAdapter: PersonAdapter
    private lateinit var app: PersonApp // Declarar la variable sin inicializarla aún
    private var selectedPerson: Person? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)

        app = applicationContext as PersonApp // Inicializar aquí

        personAdapter = PersonAdapter { person -> onPersonSelected(person) }
        binding.recyclerView.layoutManager = LinearLayoutManager(this)
        binding.recyclerView.adapter = personAdapter

        loadPeople()

        binding.buttonAdd.setOnClickListener {
            addPerson()
        }

        binding.buttonDelete.setOnClickListener {
            deleteSelectedPerson()
        }
    }

    private fun loadPeople() {
        lifecycleScope.launch {
            val people = app.room.personDao().getAll()
            personAdapter.setPeople(people)
        }
    }

    private fun addPerson() {
        val name = binding.editTextName.text.toString()
        val age = binding.editTextAge.text.toString().toIntOrNull()
        val address = binding.editTextAddress.text.toString()

        if (name.isNotBlank() && age != null && address.isNotBlank()) {
            val person = Person(0, name, age, address) // ID will be generated by Room
            lifecycleScope.launch {
                app.room.personDao().insert(listOf(person))
                loadPeople() // Refresh the list
                Toast.makeText(this@MainActivity, "Persona agregada", Toast.LENGTH_SHORT).show()
            }
        } else {
            Toast.makeText(this, "Por favor, completa todos los campos", Toast.LENGTH_SHORT).show()
        }
    }

    private fun onPersonSelected(person: Person) {
        selectedPerson = person
        Toast.makeText(this, "Seleccionado: ${person.name}", Toast.LENGTH_SHORT).show()
    }

    private fun deleteSelectedPerson() {
        selectedPerson?.let { person ->
            lifecycleScope.launch {
                app.room.personDao().delete(person)
                loadPeople() // Refresh the list
                selectedPerson = null // Clear selection
                Toast.makeText(this@MainActivity, "Persona eliminada: ${person.name}", Toast.LENGTH_SHORT).show()
            }
        } ?: run {
            Toast.makeText(this, "No hay persona seleccionada", Toast.LENGTH_SHORT).show()
        }
    }
}